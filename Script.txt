import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import jsPDF from "jspdf";

const laborRate = 145; // Labor rate per hour
const helperRate = 75; // Helper rate per hour

const calculateMaterialMarkup = (cost) => {
  if (cost <= 10) return cost * 4; // 300% markup
  if (cost <= 30) return cost * 3; // 200% markup
  if (cost <= 150) return cost * 2; // 100% markup
  return cost * 1.65; // 65% markup
};

export default function QuoteGenerator() {
  const [hours, setHours] = useState(0);
  const [helperHours, setHelperHours] = useState(0);
  const [materialCost, setMaterialCost] = useState(0);
  const [total, setTotal] = useState(0);
  const [loggedIn, setLoggedIn] = useState(false);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");

  const correctUsername = "LanhamClifton";
  const correctPassword = "1234";

  const handleLogin = () => {
    if (username === correctUsername && password === correctPassword) {
      setLoggedIn(true);
    } else {
      alert("Invalid login credentials");
    }
  };

  const calculateQuote = () => {
    const laborCost = hours * laborRate;
    const helperCost = helperHours * helperRate;
    const markedUpMaterialCost = calculateMaterialMarkup(materialCost);
    const finalTotal = laborCost + helperCost + markedUpMaterialCost;
    setTotal(finalTotal);
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.text("Hawkins Electric Service, Inc. Quote", 20, 20);
    doc.text(`Created by: ${username}`, 20, 30);
    doc.text(`Labor Hours: ${hours}`, 20, 50);
    doc.text(`Helper Hours: ${helperHours}`, 20, 60);
    doc.text(`Material Cost: $${materialCost.toFixed(2)}`, 20, 70);
    doc.text(`Total: $${total.toFixed(2)}`, 20, 80);
    doc.save("quote.pdf");
  };

  if (!loggedIn) {
    return (
      <div className="flex flex-col items-center p-6">
        <Card className="w-full max-w-md p-6">
          <CardContent>
            <h1 className="text-xl font-bold mb-4">Login</h1>
            <input
              type="text"
              placeholder="Username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="border p-2 w-full mb-4"
            />
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="border p-2 w-full mb-4"
            />
            <Button onClick={handleLogin} className="w-full">
              Login
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center p-6">
      <Card className="w-full max-w-lg p-6">
        <CardContent>
          <h1 className="text-xl font-bold mb-4">Generate a Quote</h1>
          <label className="block mb-2">Labor Hours:</label>
          <input
            type="number"
            value={hours}
            onChange={(e) => setHours(Number(e.target.value))}
            className="border p-2 w-full mb-4"
          />
          <label className="block mb-2">Helper Hours:</label>
          <input
            type="number"
            value={helperHours}
            onChange={(e) => setHelperHours(Number(e.target.value))}
            className="border p-2 w-full mb-4"
          />
          <label className="block mb-2">Material Cost ($):</label>
          <input
            type="number"
            value={materialCost}
            onChange={(e) => setMaterialCost(Number(e.target.value))}
            className="border p-2 w-full mb-4"
          />
          <Button onClick={calculateQuote} className="w-full mb-4">
            Calculate Quote
          </Button>
          {total > 0 && (
            <div className="text-lg font-semibold mt-4">
              Total Quote: ${total.toFixed(2)}
            </div>
          )}
          <Button onClick={generatePDF} className="w-full mt-4">
            Download Quote as PDF
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}
